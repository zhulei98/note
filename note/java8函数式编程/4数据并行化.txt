

					第六章 数据并行化

	1,并行和并发
  并发是两个任务共享时间段，并行则是两个任务在同一时间发生;数据并行化是指将数据分成块，为每块数据分配单独的处理单元。


	2.并行化流操作
  并行化操作流只需改变一个方法调用。如果已经有一个 Stream 对象，调用它的 parallel 方法就能让其拥有并行操作的能力。如果
想从一个集合类创建一个流，调用 parallelStream 就能立即获得一个拥有并行能力的流。
例: 串行化计算专辑曲目长度
public int serialArraySum() {
     return albums.stream()
                  .flatMap(Album::getTracks)
                  .mapToInt(Track::getLength)
                  .sum(); 
}
例:  并行化计算专辑曲目长度 
public int parallelArraySum() {
     return albums.parallelStream()
                  .flatMap(Album::getTracks)
                  .mapToInt(Track::getLength)
                  .sum(); 
}
  输入流的大小并不是决定并行化是否会带来速度提升的唯一因素，性能还会受到编写代码 的方式和核的数量的影响。
	

	3.模拟系统
例:　使用蒙特卡洛模拟法并行化模拟掷骰子事件 
public Map<Integer, Double> parallelDiceRolls() {
  double fraction = 1.0 / N;		   
  return IntStream.range(0, N)            //使用 IntStream 的 range 方法创建大小为 N 的流            
                  .parallel()             //调用 parallel 方法使用流的并行化操作           
                  .mapToObj(twoDiceThrows())    //twoDiceThrows 函数模拟了连续掷两次骰子事件，返回值是两次点数之和。
						  在处使用 mapToObj 方法以便在流上使用该函数。
       
                  .collect(groupingBy(side -> side, // 使用groupingBy 方法将点数一样的结果合并  
                     summingDouble(n -> fraction))); 
}
最终的返回值类型是 Map<Integer, Double>，是点数之和到它们的概率的映射。
例:  通过手动使用线程模拟掷骰子事件 
public class ManualDiceRolls { 
 
    private static final int N = 100000000; 
 
    private final double fraction;
    private final Map<Integer, Double> results;
    private final int numberOfThreads; 
    private final ExecutorService executor; 
    private final int workPerThread; 
 
    public static void main(String[] args) {
         ManualDiceRolls roles = new ManualDiceRolls();
         roles.simulateDiceRoles();     
    } 

    public ManualDiceRolls() {
         fraction = 1.0 / N;
         results = new ConcurrentHashMap<>();
         numberOfThreads = Runtime.getRuntime().availableProcessors();
         executor = Executors.newFixedThreadPool(numberOfThreads);
         workPerThread = N / numberOfThreads;     
    }

    public void simulateDiceRoles() {
         List<Future<?>> futures = submitJobs();
         awaitCompletion(futures);
         printResults();     
    }

    private void printResults() {
         results.entrySet()
                .forEach(System.out::println);    
    }

    private List<Future<?>> submitJobs() {
         List<Future<?>> futures = new ArrayList<>();
         for (int i = 0; i < numberOfThreads; i++) {
             futures.add(executor.submit(makeJob()));
         }
         return futures;
    } 

    private Runnable makeJob() {
         return () -> {
             ThreadLocalRandom random = ThreadLocalRandom.current();
             for (int i = 0; i < workPerThread; i++) {
                 int entry = twoDiceThrows(random);
                 accumulateResult(entry);
             }
         };
    } 

     private void accumulateResult(int entry) {
         results.compute(entry, (key, previous) ->
             previous == null ? fraction
                              : previous + fraction
         );
    } 

     private int twoDiceThrows(ThreadLocalRandom random) {
         int firstThrow = random.nextInt(1, 7);
         int secondThrow = random.nextInt(1, 7);
         return firstThrow + secondThrow;
    } 
 
    private void awaitCompletion(List<Future<?>> futures) {
         futures.forEach((future) -> {
             try {
                 future.get();
             } catch (InterruptedException | ExecutionException e) { 
		      e.printStackTrace();
             }
         });
         executor.shutdown();
     } 
 
} 
可以看到，大多数代码都在处理调度和等待线程池中的某项任务完成。而 使用并行化的流时，这些都不用程序员手动管理。

	
	4.限制
  为了发挥并行流框架的优势，写代码时必须遵 守一些规则和限制。
(1)reduce 方法,为了让其在并行化时能工作正常，初值必须为组合函数的恒等值,即拿恒等值和其他值做 reduce 操作时，其他值保持
不变的值。
(2)reduce 操作的另一个限制是组合操作必须符合结合律。这意味着只要序列的值不变，组合操作的顺序不重要。
(3)要避免的是持有锁。
  在要对流求 值时，不能同时处于两种模式，要么是并行的，要么是串行的。如果同时调用了 parallel 和 sequential 方法，最后
调用的那个方法起效。


	5.性能
  影响并行流性能的主要因素有 5 个:
(1)数据大小,  输入数据的大小会影响并行化处理对性能的提升。将问题分解之后并行化处理，再将结 果合并会带来额外的开销。因此
只有数据足够大、每个数据处理管道花费的时间足够多时，并行化处理才有意义。
(2)源数据结构,  每个管道的操作都基于一些初始数据源，通常是集合。将不同的数据源分割相对容易， 这里的开销影响了在管道中并
行处理数据时到底能带来多少性能上的提升。
(3)装箱,   处理基本类型比处理装箱类型要快。
(4)核的数量  拥有的核越多，获得潜在性能提升的幅度就越大。
(5)单元处理开销  比如数据大小，这是一场并行执行花费时间和分解合并操作开销之间的战争。花在流中 每个元素身上的时间越长，并
行操作带来的性能提升越明显。

例: 并行求和 
private int addIntegers(List<Integer> values) {
     return values.parallelStream()
                  .mapToInt(i -> i)
                  .sum(); 
}
在底层，并行流还是沿用了 fork/join 框架。fork 递归式地分解问题，然后每段并行执行， 最终由 join 合并结果，返回最后的值。
  根据分解的难易程度:
(1)性能好 ArrayList、数组或 IntStream.range
(2)性能一般 HashSet、TreeSet
(3)性能差  LinkedList，对半分解太难了。还有 Streams.iterate 和 BufferedReader.lines，它们 长度未知，因此很难预测该在哪里
分解。
  无状态的和有状态的:无状态操作整个过程中不必维护状态,map、 filter 和 flatMap;
有状态操作则有维护状态所需的开销和限制,包括 sorted、distinct 和 limit.  
  如果能避开有状态，选用无状态操作，就能获得更好的并行性能。
  

 
 
 
 
  
 
  
 
 
 


  
