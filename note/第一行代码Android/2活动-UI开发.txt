
（3） 在AndroidManifest文件中注册
  所有的活动都要在 AndroidManifest.xm1中进行注册才能生效。打开 app/src/main/AndroidManifest.xm1文件 , 代码如下所示:
<manifest xmlns: android=nhttp: //schemas. android. com/apk/res/android"
     package=·com.example.activitytest">
     <appLication
	android:a11owBackup="true"
	android:icon_"@mipmap/ic_1auncher"
	android:1Labe1.="@string/app_name"
	android:supportsRtl="true"
	android:theme_"@style/AppTheme">
        <activity android: name=".FirstActivity"></activity>
     <activity android: name=".FirstActivity"></activity>
</manifest>
  在<activity>标签中使用了 android: name 来指定具体注册哪一个活动 . FirstActivity是 com.exampLe.activitytest. FirstActivity
的缩写面已。
  配置主活动的方法就是在<Activity>标签内部加入<intent-fliter>标签，并在这个标签里添加标签里添加<action android: name="android.
intent.action.MAIN"/>和<category android:name="android. intent. category. LAUNCHER" />这两句声明即可。
  需要注意的是,给主活动指定的labe1不仅会成为标题栏中的内容, 还会成为启动器( Launcher)中应用程序显示的名称。
  修改后的 AndroidManifest.xm1文件, 代码如下所示:
<manifest xmtns:android="http://schemas.android.com/apk/res/android"
    package="com.example.activitytest">
    <application
	....>
	<activity android: name=". FirstActivity"
	    <intent-filter>
		<action android:name="android.intent.action.MAIN" />
		<category android:name="android.intent.category.LAUNCHER" />
	    </intent-filter>
	</activity>
    </application>
<manifest>
  这样的话, FirstActivity 就成为这个程序的主活动了, 即点击桌面应用程序图标时首先打开的就是这个活动。
（4） 在活动中使用Toast
  Toast是Android系统提供的一种非常好的提醒方式,在程序中可以使用它将一些短小的信息通知给用户,这些信息会在一段时间后自动消失,并且
不会占用任何屏幕空间。
  在 oncreate( )方法中添加如下代码:
protected void onCreate(BundlLe savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.1ayout.first_1ayout);
    Button button1 = (Button) findViewById(R.id.button_1):
    buttonl.setOnClickListener(new View.0nClickListener() {
	@Override
	public void onClick(View v) {
	    Toast.makeText(FirstActivity.this, "You clLicked Buttonl",
		Toast.LENGTH_SHORT).show( ) ;
	}
    });
}
通过 findviewById( )方法获取到在布局文件中定义的元素,findviewById( )方法返回的是一个 view对象,我们需要向下转型将它转成 Button对
象，得到按钮的实例之后, 通过调用 setOnclickListener( )方法为按钮注册一个监听器, 点击按钮时就会执行监听器中的 onCl ic k( )方法 。
因此,弹出 Toast的功能当然是要在 onCLic k( ) 方法中编写。
（5） 在活动中使用Menu
  首先在 res目录下新建一个 menu文件夹,右击 res目录→New→Directory,输人文件夹名menu,点击 0K。接着在这个文件夹下再新建一个名叫 
main的菜单文件,右击 menu文件夹→New→Menuresource file 文件名输入 main,点击 0K完成创建。然后在 main.xml中添加如下代码：
<menu xmlns:android="http://schemas.android. com/apk/res/android">
    <item
	android:id="cl+id/add_item"
	android:titlLe="Add”/>
    <item
	android:id="@+id/remove_item"
	android:title="Remove"/>
    </menu>
<item>标签就是用来创建具体的某一个菜单项, 然后通过 android:id给这个菜单项指定一个唯一的标识符,通过 android:title给这个菜单项指定
一个名称。
  接着重新回到 FirstActivity中来重写 onCreateOptionsMenu( )方法,重写方法可以使用 Ctr1+ 0快捷键,然后在 onCreateOptionsMenu( )方
法中编写如下代码:
public boolean onCreateOptionsMenu(Menu menu)  {
    getMenuInflater().inflate(R.menu.main, menu);
    return true;
}
通过 getMenuInfLater( )方法能够得到 MenuInflater对象,再调用它的 inflate( )方法就可以给当前活动创建菜单了 。
  还要再定义菜単响应事件。在 FirstActivity 中重写 onOptionsItemseLected( )方法:
public boolean onOptionsItemSelected(MenuItem item) {
    switch(item.getItemId()) {
    case R.id.add_item:
	Toast.makeText(this, "You clicked Add", Toast.LENGTH_SHORT).show();
	break;
    case R.id.remove_item:
	Toast.makeText(this, "You clicked Remove",Toat.LENGTH_SHORT).show();
	break,
    default;
    }
    return;
}
  菜单里的菜单项默认是不会显示出来的, 只有点击一下菜单按钮才会弹出里面具体的内容, 因此它不会占用任何活动的空间。
（6）销毁一个活动
  只要按一下 Back键就可以销毀当前的活动；Activity 类提供了一个 finish( )方法, 在活动中调用一下这个方法也可以销毀当前活动。
修改按钮监听器中的代码, 如下所示:
button1.setOnClickListener(new View.0nClickListener() {
    @0verride
    public void onClick(View v) {
	finish(); 
    }
});
重新运行程序,这时点击一下按钮,当前的活动就被成功销毁了,效果和按下 Back键是一样的。


	2.使用Intent在活动之间穿梭
  Intent大致可以分为两种:显式 lntent和隐式 lntent。
  显式：
 Activity类中提供了一个 startActivity( )方法,这个方法是专门用于启动活动的,它接收一个 Intent参数,这里我们将构建好的 Intent传入
sta rtActivity( )方法就可以启动目标活动了，修改 FirstActivity 中按钮的点击事件,代码如下所示:
buttonl.setOnClckListener(new View.0nClickListener() {
    @0verride
    publlc void onClick(View v) {
	@Intent intent = new Intent(FirstActivity.this, SecondActivity.class);
	startActivity(intent) ;
    }
});
首先构建出了一个 Intent,传入 FirstActivity.this作为上下文,传入 SecondActivity.class作为目标活动,即在 FirstActivity这个活动的基础
上打开 SecondActivity 这个活动。 然后通过 startActivity( )方法来执行这个 Intent。
  按下Back键就可以销毁当前活动,从而回到上一个活动。使用这种方式来启动活动, Intent的“意图”非常明显,因此称之为显式lntent。
  隐式：
  隐式 Intent则含蓄了许多, 它并不明确指出我们想要启动哪一个活动，而是指定了一系列更为抽象的 action和 category等信息,然后交由系统
去分析这个 Intent,并帮我们找出合适的活动去启动 。
  通过在<activity>标签下配置<intent- filter>的内容, 可以指定当前活动能够响应的action和 category,打开AndroidManifest.xm1,添加如下
代码:
<activity android:name=".SecondActivity">
    <intent-filLter>
	<action android:name="com.example.activitytest.ACTION_START" />
	<category android:name="android.intent.category.DEFAULT" />
	<category android:name="com.example.activitytest. MY_CATEGORY"/>
    <intent-filLter>
</activity>
  只有<action>和<catego ry>中的内容同时能够匹配上 Intent中指定的 action和 category时,这个活动才能响应该lntent。
  使用隐式 Intent,不仅可以启动自已程序内的活动, 还可以启动其他程序的活动:
修改 FirstActivity 中按钮点击事件的代码, 如下所示:
button1.setOnClickListener(new View.0nClickListener() {
    @0verride 
    public void onClLick(View v) {
	Intent intent = new Intent(Intent.ACTION_VIEW);
	Intent.setData(Uri.parse("http://www.baidu.com") ) 
	startActivity(intent) ;
    }
});
首先指定了 Intent的 action是 Intent.ACTION VIEW,这是一个Android系统内置的动作, 其常量值为 android.intent.action.vIEw。 然后通过 
uri.parse( )方法, 将一个网址字符申解析成一个 uri对象,再调用 Intent的 setData( )方法将这个 uri对象传递进去。
  setData( )接收一个 uri对象,主要用于指定当前 Intent正在操作的数据,而这些数据通常都是以字符串的形式传入到Uri.parse()方法中解析
产生的。 <data>标签中主要可以配置以下内容 ：
（1）android:scheme。用于指定数据的协议部分,如上例中的 http部分。
（2）android:host。用于指定数据的主机名部分, 如上例中的 www.baidu.com部分。
（3）android:port。 用于指定数据的端口部分, 一般紧随在主机名之后。
（4）android:path。用于指定主机名和端口之后的部分,如一段网址中跟在域名之后的内容。
（5）android: mimeType 。用于指定可以处理的数据类型,允许使用通配符的方式进行指定。
  只有<data>标签中指定的内容和 Intent中携带的 Data 完全一致时, 当前活动才能够响应该Intent。不过一般在<data>标签中都不会指定过多
的内容,如上面浏览器示例中,其实只需要指定 android: scheme为 http,就可以响应所有的 http协议的 lntent了。

	3.在活动间传递数据
  向下一个活动传递数据：
  思路很简单, Intent中提供了一系列 putExtra( )方法的重载,可以把我们想要传递的数据暂存在 Intent中,启动了另一个活动后,只需要把这
些数据再从 Intent中取出就可以了。比如说 FirstActivity 中有一个字符串,现在想把这个字符串传递到 SecondActivity中：
buttonl.setOnClickListener(new View.0nClickListener() {
    @0verride
    public void onClick(View v) {
	String data = "Hello SecondActivity",
	Intent intent = new Intent(FirstActivity.this. SecondActivity.class):
	intent. putExtra("extra_data", data) ,
	startActivity(intent) ;
    }
});
这里 putExtra()方法接收两个参数,第一个参数是键,用于后面从 Intent中取值, 第二个参数才是真正要传递的数据。
  然后我们在 SecondActivity 中将传递的数据取出, 并打印出来, 代码如下所示:
public cLass SecondActivity extends AppCompatActivity{

    @0verride
    protected void onCreate(Bundle savedInstanceState)  {
	super.onCreate(savedInstanceState) ;
	setContentView(R.layout.second_Layout);
	Intent intent = getIntent();
	String data = intent.getStringExtra("extra_data");
	Log.d("SecondActivity", data);
    }
}
  首先可以通过 getIntent()方法获取到用于启动 SecondActivity 的 Intent,然后调用getstring Extra( )方法, 传入相应的键值, 就可以得到
传递的数据了。
  返回数据给上一个活动：
  返回上一个活动只需要按一下 Back键就可以了,并没有一个用于启动活动 Intent来传递数据。Activity中还有一个 startActivityForResult( )
方法也是用于启动活动的, 但这个方法期望在活动销毁的时候能够返回一个结果给上一个活动。
  startActivityForResult( )方法接收两个参数, 第一个参数还是 Intent, 第二个参数是请求码,用于在之后的回调中判断数据的来源。

	4. 活动的生命周期
（1）返回栈
  Android中的活动是可以层叠的。我们每启动一个新的活动,就会覆盖在原活动之上,然后点击 Back键会销毁最上面的活动,下面的一个活动就会
重新显示出来。其实 Android是使用任务(Task)来管理活动的, 一个任务就是一组存放在栈里的活动的集合,这个栈也被称作返回栈(BackStack)。
  每当我们启动了一个新的活动, 它会在返回栈中入栈, 并处于栈顶的位置。 而每当我们按下 Back或调用 finish( )方法去销毁一个活动时, 
处于栈顶的活动会出桟, 这时前一个入桟的活动就会重新处于栈顶的位置，系统总是会显示处于栈顶的活动给用户。
（2）活动状态
  每个活动在其生命周期中最多可能会有4种状态：
    1运行状态    2暂停状态    3停止状态    4销毁状态
（3）活动的生存期
Activity 类中定义了7个回调方法：
  onCreate( ) 。 它会在活动第一次被创建的时候调用，应该在这个方法中完成活动的初始化操作, 比如说加载布局、绑定事件等。
  onstart( ) 。 这个方法在活动由不可见变为可见的时候调用。
  onResume( ) 。这个方法在活动准备好和用户进行交互的时候调用。此时的活动一定位于返回栈的栈顶,并且处于运行状态。
  onPause( ) 。这个方法在系统准备去启动或者恢复另一个活动的时候调用。通常会在这个方法中将一些消耗 CPU的资源释放掉,以及保存一些
关键数据,但这个方法的执行速度一定要快, 不然会影响到新的栈顶活动的使用 。
  onStop()。这个方法在活动完全不可见的时候调用。它和 onPause()方法的主要区别在于, 如果启动的新活动是一个对话框式的活动, 那么 
onPause( )方法会得到执行, 而onstop( )方法并不会执行。
  onDestroy( ) 。 这个方法在活动被销毁之前调用, 之后活动的状态将变为销毁状态。
  onRestart( ) 。这个方法在活动由停止状态变为运行状态之前调用, 也就是活动被重新启动了。
活动分为三种生存周期：
  1）完整生存期。活动在 oncreate()方法和 onDestroy( )方法之间所经历的,就是完整生存期 。 一般情况下, 一个活动会在 oncreate()方法
中完成各种初始化操作, 而在onDest roy( )方法中完成释放内存的操作 。
  2）可见生存期。活动在 onstart( )方法和 onstop( )方法之间所经历的,就是可见生存期。在可见生存期内, 活动对于用户总是可见的, 即便
有可能无法和用户进行交互。可以通过这两个方法, 合理地管理那些对用户可见的资源。比如在onsta rt( )方法中对资源进行加载,而在onstop( )
方法中对资源进行释放,从而保证处于停止状态的活动不会 占用过多内存。
  3）前台生存期。活动在 onResume( )方法和 onPause()方法之间所经历的就是前台生存期。在前台生存期内, 活动总是处于运行状态的, 此时
的活动是可以和用户进行交互的。
（4）活动收回
  Activity中还提供了一个 onsaveInstanceState( )回调方法，这个方法可以保证在活动被回收之前一定会被调用, 因此可以通过这个方法来解
决活动被回收时临时数据得不到保存的问题。
  在 MainActivity 中添加如下代码就可以将临时数据进行保存：
@0verride
protected void onSaveInstanceState(BundlLe outState) {
    super.onSaveInstanceState(outState) ;
    String tempData= "Something you just typed";
    outState.putString( "data_key" , tempData) ;
}
  修改 MainActivity 的 onCreate( )方法对数据进行恢复, 如下所示：
@0verride
protected void onCreate(BundlLe savedInstanceState) {
    super.onCreate(savedInstanceState);
    Log.d(TAG, "onCreate");
    setContentView(R.layout.activity_main);
    if(savedInstanceState!=null) {
	String tempData= savedInstanceState.getString("data_key")
	Log.d(TAG, tempData);
    }
    ....
}

	5. 活动的启动模式
  启动模式一共有4种,分别是 standard、 singleTop、 singleTask和singleInstance,可以在 AndroidManifest.xm1中通过给<activity>标签指
定android: launchMode 属性来选择启动模式。 
（1）standard
  standard是活动默认的启动模式, 在不进行显式指定的情况下, 所有活动都会自动使用这种启动模式。对于使用 standard模式的活动,系统不会
在乎这个活动是否已经在返回栈中存在, 每次启动都会创建该活动的一个新的实例。 
（2）singleTop
  singleTop在启动活动时如果发现返回栈的栈顶已经是该活动, 则认为可以直接使用它, 不会再创建新的活动实例。
（3）singleTask
  当活动的启动模式指定为 singleTask, 每次启动该活动时系统首先会在返回栈中检査是否存在该活动的实例, 如果发现已经存在则直接使用该
实例, 并把在这个活动之上的所有活动统统出栈, 如果没有发现就会创建一个新的活动实例。
（4）singleInstance
  指定为singleInstance模式的活动会启用一个新的返回栈来管理这个活动(其实如果 singleTask模式指定了不同的 taskAffinity, 也会启动一
个新的返回栈来管理这个活动(其实如果 singleTask模式指定了不同的 taskAffinity, 也会启动一个新的返回栈)。
  在这种模式下会有一个単独的返回栈来管理这个允许其他程序共享的活动, 不管是哪个应用程序来访问这个活动,都共用的同一个返回桟, 也就
解决了共享活动实例的问题。

	6. 活动的实践技巧
(1)知晓当前是在哪个活动
  在 ActivityTest项目的基础上修改,新建一个 BaseActivity类。右击com.example.activitytest包→New→Java Class,在弹出的窗口出输入
BaseActivity，这里 BaseActivity 和普通活动的创建方式并不一样,  因为不需要让BaseActivity在 AndroidManifest.xm1中注册,所以选
择创建一个普通的 Java类就可以了。然后让 BaseActivity继承自 AppCompatActivity,并重写 onCreate( )方法,如下所示:
pub1ic class BaseActivity extends AppCompatActivity{
    @0verride
    protected void onCreate(Bundle savedInstanceState) {
	super onCreate(savedInstanceState);
	Log.d("BaseActivity", getCLass() .getSimpleName());
    }
}
现在每当我们进入到一个活动的界面, 该活动的类名就会被打印出来, 这样我们就可以时刻知晓当前界面对应的是哪一个活动了。
（2）随时随地退出程序
  需要用一个专门的集合类对所有的活动进行管理，新建一个 Activitycollector类作为活动管理器, 代码如下所示:
public class ActivityCollector{
    public static List<Activity> activities= new ArrayList<>();
    public static void addActivity(Activity activity) {
	activities.add(activity);
    }
    public static void  removeActivity(Activity activity) {
	activities. remove(activity);
    }
    public static void finishA1.l()  {
	for(Activity activity    activities)  {
	    if (!activity.isFinishing())  {
		activity.finish();
	    }
	}
    }
}
在活动管理器中,通过一个 List来暂存活动,然后提供了一个 addActivity()方法用于向 List中添加一个活动,提供了一个 removeActivity( )
方法用于从 List中移除活动,最后提供了一个 finishAll( )方法用于将 List中存储的活动全部销毁掉。
  接下来修改 BaseActivity中的代码,如下所示:
public class BaseActivity extends AppCompatActivity{
    @0verride
    protected void onCreate(Bundle savedInstanceState) {
	super.onCreate(savedInstanceState);
	Log.d("BaseActivity", getClass() .getSimpleName());
	ActivityCouector.addActivity(this);
    }
    @0verride
    protected void onDestroy() {
    super. onDestroy( );
    ActivityColLector. removeActivity(this);
    }
}
在 BaseActivity的 onCreate()方法中调用了 ActivityCollector的 addActivity()方法,表明将当前正在创建的活动添加到活动管理器里。然后
在 BaseActivity中重写 onDestroy( )方法,并调用了 ActivityColl.ector的 removeActivity()方法,表明将一个马上要销毁的活动从活动管理
器里移除。
  从此以后,不管想在什么地方退出程序, 只需要调用 ActivityCo1lector.finishAl1( )方法就可以了。
  杀掉进程的代码如下所示: 
android.os.Process. killProcess(android.os.Process.myPid());
其中, kiuProcess()方法用于杀掉一个当前程序的进程，它接收一个进程id参数,可以通过myPid( )方法来获得当前程序的进程id。

	6.启动活动的最佳写法
  遇到需要启动SecondActivity的情况时，修改SecondActivity中的代码如下：
public class SecondActivity extends BaseActivity  {
    public static void actionStart(Context context,  String datal,  String data2)  {
	Intent intent = new Intent(context,  SecondActivity.cLass);
	intent.putExtra("param1",  data1);
	context.startActivity(intent);
    }
    ...
}
  启动 SecondActivity, 如下所示:
buttonl.setOnClickListener(new OnClickListener() {
    @0verride
    public vo;Ld onClick(View v) {
	SecondActivity.actionStart(FirstActivity.this, "datal", "data2");
    }
});

*******************************************************************************************************************************
*******************************************************************************************************************************

				第三章		UI（user interface用户界面）开发

	1.如何编写程序界面
（1）可视化编辑器，优点：方便，直观。缺点：通常不具有很好的屏幕适配性, 而且当需要编写较为复杂的界面时,可视化编辑工具将很难胜任。
（2）使用XML来编写界面（本书中的方法）

	2.常用控件的使用方法
（1）TextView
  用于在界面上显示一段文本信息
修改 activity_main.xml中的代码, 如下所示:
<LinearLayout xmlns:android_"http://schemas.android.com/apk/res/android"
    android:orientation="verticaL"
    android:layout_width="match_parent"
    android:1ayout_height="match_parent">

    <TextView
	and roid:id="@+id/text_view"                   //给当前控件定义了一个唯一标识符
	android:layout_width="match_parent"		//指定了控件的宽度和高度
	android:layout_height="wrap_content"
	android:text="This is TextView"  />
</LinearLayout>
指定宽度和高度可选值有3种: match_parent、 fill_parent和 wrap_content。 match_parent表示让当前控件的大小和父布局的大小一样,也就
是由父布局来决定当前控件的大小。 wrap content表示让当前控件的大小能够刚好包含住里面的内容, 也就是由控件内容决定当前控件的大小。
  所以上面的代码就表示让TextView的宽度和父布局一样宽,也就是手机屏幕的宽度,让 TextView的高度足够包含住里面的内容。
  修改 TextView的文字的对齐方式，如下所示：
<LinearLayout xmlns:android_"http://schemas.android.com/apk/res/android"
    android:orientation="verticaL"
    android:layout_width="match_parent"
    android:1ayout_height="match_parent">

    <TextView
	and roid:id="@+id/text_view"                   
	android:layout_width="match_parent"		
	android:layout_height="wrap_content"
	android:gravity="center"
	android:text="This is TextView"  />
</LinearLayout>
  使用 android:gravity来指定文字的对齐方式,可选值有 top、 bottom、Left、 right、center等,可以用“|”来同时指定多个值,这里我们
指定的 center,效果等同于 center_vertica1 | center_horizontal , 表示文字在垂直和水平方向都居中对齐。
  还可以对 Textview中文字的大小和颜色进行修改, 如下所示:
<LinearLayout xmlns:android_"http://schemas.android.com/apk/res/android"
    android:orientation="verticaL"
    android:layout_width="match_parent"
    android:1ayout_height="match_parent">

    <TextView
	and roid:id="@+id/text_view"                   
	android:layout_width="match_parent"		
	android:layout_height="wrap_content"
	android:gravity="center"
	android:textSize="24sp"
	android: textColor="#08ff00"
	android:text="This is TextView"  />
</LinearLayout>
 在 Android中字体大小使用sp作为单位

（2）Button
  可以在activity_main.xm1中这样加入 Button：
<LinearLayout xmllns:android=·http://schemas.android.com/apk/res/android"
    android:orientation="vertica1"
    android:layout_width="match_parent"
    android:1ayout_height="match_parent">

    ...

    <Button
	and roid:id="@+id/button"                   
	android:layout_width="match_parent"		
	android:layout_height="wrap_content"
	android:text="Button" />
</LinearLayout>
可以在最后添加 android:textAllCaps="false" 来禁用自动转换Button为大写
  接下来可以在 MainActivity 中为 Button的点击事件注册一个监听器, 如下所示：
publlc class MainActivity extends AppCompatActivity{
    @0verride
    protected void onCreate(Bundle savedInstanceState)  {
	super.onCreate(savedInstanceState);
	setContentView(R.layout.activity_main) ;
	Button button = (Button)  findViewById(R.id.button);
	button. setOnClickListener(new View. OnClickListener()  {
	    @0verride
	    public void onClick(View v) {
		//在此处添加逻辑
	    }
	});
}
这样每当点击按钮时,就会执行监听器中的 onclick( )方法,我们只需要在这个方法中加入待处理的逻辑就行了。

（3）EditText
  EditText是程序用于和用户进行交互的另一个重要控件, 它允许用户在控件里输入和编辑内容,并可以在程序中对这些内容进行处理。
修改 activity_main.xm1中的代码,如下所示:
<LinearLayout xmllns:android=·http://schemas.android.com/apk/res/android"
    android:orientation="vertica1"
    android:layout_width="match_parent"
    android:1ayout_height="match_parent">

    ...

    <EditText	 
	and roid:id="@+id/edit_text"                   
	android:layout_width="match_parent"		
	android:layout_height="wrap_content" />
</LinearLayout>
  Android控件的使用规律,用法基本上都很相似: 给控件定义一个 id, 再指定控件的宽度和高度, 然后再适当加入一些控件特有的属性。
  如果要在输入框里显示一些提示性的文字，只需在最后加上:
	android:hint="Type something here"
  通过 android: maxLines指定了 FditText的最大行数,代码如下：
<LinearLayout xmllns:android=·http://schemas.android.com/apk/res/android"
    android:orientation="vertica1"
    android:layout_width="match_parent"
    android:1ayout_height="match_parent">

    ...

    <EditText	 
	and roid:id="@+id/edit_text"                   
	android:layout_width="match_parent"		
	android:layout_height="wrap_content" 
	android:maxLines="2"
    />
</LinearLayout>

（4） ImageView
  ImageView是用于在界面上展示图片的一个控件，需要提前准备好一些图片放在以“drawable”开头的目录下。在 res目最下新建一个 
drawable-xhdpi目录,然后将事先准备好的两张图片 img_1.png和 img_2.png复制到该目录当中。
修改activit1y_main.xm1,如下所示:
<LinearLayout xmllns:android=·http://schemas.android.com/apk/res/android"
    android:orientation="vertica1"
    android:layout_width="match_parent"
    android:1ayout_height="match_parent">

    ...

    <ImageView
	and roid:id="@+id/image_view"                   
	android:layout_width="wrap_parent"		
	android:layout_height="wrap_content" 
	android:src="@drawable/img_1 "
	/>
</LinearLayout>
这里使用android:src属性给 ImageView指定了一张图片。还可以在程序中通过代码动态地更改ImageView中的图片,然后修改MainActivity的代
码，如下所示：
public class MainActivity extends AppCompatActivity implements View.0nClickListener{

    private EditText editText;

    private ImageView imageView;

    @0verride
    protected void onCreate(Bundle savedInstanceState)  {
	super.onCreate(savedInstanceState);      
	setContentView(R.layout.activity_main);
	Button button = (Button)  findViewById(R.id.button);
	editText_ (EditText)  findViewById(R.id.edit_text);
	imageView = (ImageView)  findViewById(R.id.image_view);
	button.setOnClickListener(this);
    }

    @0verride
    public void onClick(View v)  {
	switch  (v.getId())  {
	    case R.id.button:
		imageView. setImageResource(R.drawable.img_2) ;
		break;
	    default;
		break;
	    }
	}
}
在按钮的点击事件里,通过调用 ImageView的 setImageResource( )方法将显示的图片改成img_2。

（5）ProgressBar
  ProgressBar用于在界面上显示一个进度条, 表示我们的程序正在加载一些数据。用法：
修改 activity_main.xm1中的代码, 如下所示:
<LinearLayout xmllns:android=·http://schemas.android.com/apk/res/android"
    android:orientation="vertica1"
    android:layout_width="match_parent"
    android:1ayout_height="match_parent">

    ...

    <ProgressBar
	android:id="@+id/progress_bar"
	android:layout_width="match_parent"
	android:layout_height="wrap_content"
	/>
</LinearLayout>
重新运行程序, 会看到屏幕中有一个圆形进度条正在旋转。
  Android控件的可见属性：所有的 Android控件都具有这个属性,可以通过 android: visibility进行指定。可选值有3种: visible、invisible
和gone。 
  visibLe表示控件是可见的,这个值是默认值,不指定 android:visibiLity时,控件都是可见的。
  invisibLe表示控件不可见,但是它仍然占据着原来的位置和大小, 可以理解成控件变成透明状态了。 
  gone 则表示控件不仅不可见, 而且不再占用任何屏幕空间。  
  使用setVisibility()方法来设置控件的可见性,可以传入 View.VISIBLE、 View.INVISIBLE和 View.GONE这3种值。例：
public class MainActivity extends AppCompatActivity implements View.0nClickListener{

    private EditText editText;

    private ImageView imageView;

    private ProgressBar progressBar;
 
    @0verride
    protected void onCreate(Bundle savedInstanceState) {
	super.onCreate(savedInstanceState);
	setContentView(R.layout.activity_main);
	Button button = (Button) findViewById(R.id.button);
	editText = (EditText) findViewById(R.id.edit_text);
	imageView  = (ImageView) findViewById(R.id.image_view);
    progressBar = (ProgressBar) findViewById(R.id.progress_bar);
    button.setOnClickListener(this);
}
    
@0verride
public void onClick(View v) {
    switch  (v.getId())  {
	case R.id.button:
	    if (progressBar.getVisibility() == View.GONE) {
		progressBar.setVisibility(View.VISIBLE);
	    } else{
		progressBar.setVisibility(View.GONE);
	    }
	    break;
	default;
	    break;
    }
}
在按钮的点.击事件中, 我们通过 getvisibility( )方法来判断 progressBar是否可见, 如果可见就将 ProgressBar隐藏掉,如果不可见就将 
ProgressBar显示出来。
  另外,还可以给 progressBar指定不同的样式,刚刚是圆形进度条,通过style属性可以将它指定成水平进度条,修改 activity_main.xm1中的
代码,如下所示:
<LinearLayout xmllns:android=·http://schemas.android.com/apk/res/android"
    android:orientation="vertica1"
    android:layout_width="match_parent"
    android:1ayout_height="match_parent">

    ...

    <ProgressBar
	android:id="@+id/progress_bar"
	android:layout_width="match_parent"
	android:layout_height="wrap_content"
	style="?android:attr/progressBarStyleHorizontal"
	android:max="100"
	/>
</LinearLayout>

（6） AlertDialog
  AlertDia1og可以在当前的界面弹出一个对话框,这个对话框是置顶于所有界面元素之上的,能够屏蔽掉其他控件的交互能力, 因此AlertDia1og
一般都是用于提示一些非常重要的内容或者警告信息。用法：
修改MainActivity中的代码,如下所示:
public class MainActivity extends AppCompatActivity implements View.0nClickListener{

    ...

    @0verride
  public void onClick(View v)  {
    switch (v.getId())  {
	case R.id.button:
	    ALertDialog.Builder dialog= new AILertDia1og.Builder(MainActivity.
		this);
	    dialog.setTitle("This is DiaLog");
	    dialog.setMessage("Something important.");
	    dialog.setCancelable(false); 
	    dialog.setPositiveButton("0K". new DialogInterface.
		OnClickListener() {
		@0verride
		public void onClick(DialogInterface diaiog, int which) {
		}
	    });
	    dialog.setNegativeButton("Cancel", new DialogInterface.
		OnClickListener() {
		@0verride
		public void onClick(DialogInterface dialog. int which) {
		}
	    });
	    dialog.show();
	    break;
	default;
	    break;
	}
  }
}
首先通过 AlertDia1og.Builder创建一个 AlertDia1og的实例,然后可以为这个对话框设置标题、内容、可否取消等属性。
接下来调用 setPositiveButton( )方法为对话框设置确定按钮的点击事件,调用 setNegativeButton( )方法设置取消按钮的点击事件,最后调用
show( )方法将对话框显示出来。

（7） ProgressDialog
  ProgressDia1og会在对话框中显示一个进度条, 一般用于表示当前操作比较耗时,让用户耐心地等待。用法：
修改 MainActivity中的代码, 如下所示:
public class MainActivity extends AppCompatActivity implements View.0nClickListener{

    ...

    @Override
    public void onClick(View v) {
	switch(v.getId()) {
	    case R.id.button:
		ProgressDia1og progressDialog= new ProgressDialog
		    (MainActivity.this);		
		progressDialog.setTitle("This is ProgressDialog");
		progressDialog.setMessage( "Loading. . . ");
		progressDialog.setCanceLable(true);
		progressDialog.show();
		break;
	    default;
		break;
	}
    }
}
这里也是先构建出一个ProgressDialog对象, 然后同样可以设置标题、内容、可否取消等属性,最后也是通过调用show()方法将ProgressDialog
显示出来。
  如果在setCancelable()中传入了false,表示ProgressDialog是不能通过Back键取消掉的,这时就一定要在代码中做好控制,当数据加裁完成后
必须要调用ProgressDia1og的dismiss( )方法来关闭对活框, 否则ProgressDia1og将会一直存在。



  



